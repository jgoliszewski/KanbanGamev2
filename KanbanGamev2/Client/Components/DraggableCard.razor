@using KanbanGame.Shared
@using KanbanGamev2.Client.Services
@inject IDragDropService DragDropService

<div class="draggable-card @(IsDragging ? "dragging" : "") @(IsAssignedWorkItem ? "assigned-work-item" : "") @(IsDragOverEmployee ? "drag-over-employee" : "")"
     draggable="true"
     @ondragstart="OnDragStart"
     @ondragend="OnDragEnd"
     @ondragover="OnDragOver"
     @ondragover:preventDefault
     @ondrop="OnDrop"
     @ondrop:preventDefault>
    <div class="card mb-2">
        <div class="card-body p-2">
            @if (Card is Employee employee)
            {
                <div class="employee-card @(employee.IsWorking ? "assigned" : "")">
                    <img src="@GetEmployeeAvatar(employee.Name)" alt="@employee.Name" class="employee-avatar" />
                    <div class="employee-info">
                        <div class="employee-name">@employee.Name</div>
                        <div class="employee-seniority">@employee.Role.GetDisplayName()</div>
                        <div class="employee-status">
                            <span class="badge @(employee.IsWorking ? "bg-danger" : "bg-success")">
                                @(employee.IsWorking ? "Working" : "Free")
                            </span>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <h6 class="card-title mb-1">@Card.Title</h6>
                <p class="card-text small mb-1">@Card.Description</p>
                @if (Card is Feature feature)
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="badge @feature.Priority.GetBadgeClass()">@feature.Priority</span>
                        <small class="text-muted">@feature.StoryPoints SP</small>
                    </div>
                    @if (feature.IsAssigned)
                    {
                        <span class="badge bg-success">Working</span>
                    }
                }
                else if (Card is KanbanTask task)
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="badge @task.Priority.GetBadgeClass()">@task.Priority</span>
                        <small class="text-muted">@task.ActualHours/@task.EstimatedHours h</small>
                    </div>
                    @if (task.IsAssigned)
                    {
                        <span class="badge bg-success">Working</span>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Card Card { get; set; } = null!;
    [Parameter] public string ColumnId { get; set; } = string.Empty;
    [Parameter] public BoardType BoardType { get; set; }
    [Parameter] public EventCallback<(Card card, string fromColumn, string toColumn)> OnCardMoved { get; set; }
    [Parameter] public EventCallback<(Card workCard, Employee employee)> OnWorkAssigned { get; set; }

    private bool IsDragging => DragDropService.IsDragging && DragDropService.DraggedCard?.Id == Card.Id;
    private bool IsDraggable => !DragDropService.IsReadOnlyBoard(BoardType);
    
    private bool IsDragOverEmployee => DragDropService.IsDragging && 
                                      Card is Employee && 
                                      (DragDropService.DraggedCard is KanbanTask || DragDropService.DraggedCard is Feature) &&
                                      DragDropService.CanMoveWorkForward(BoardType, DragDropService.DraggedCard, (Employee)Card);
    
    private bool IsAssignedWorkItem
    {
        get
        {
            if (Card is KanbanTask task)
                return task.AssignedToEmployeeId.HasValue;
            if (Card is Feature feature)
                return feature.AssignedToEmployeeId.HasValue;
            return false;
        }
    }

    private string GetEmployeeAvatar(string employeeName)
    {
        // Map employee names to avatar files
        var avatarMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            { "John Doe", "john.png" },
            { "Jane Smith", "jane.png" },
            { "Mike Johnson", "mike.png" },
            { "Sarah Wilson", "sarah.png" },
            { "David Brown", "david.png" },
            { "Alice Johnson", "alice.png" },
            { "Bob Wilson", "bob.png" },
            { "Emma Davis", "emma.png" },
            { "Frank Miller", "frank.png" },
            { "Grace Lee", "grace.png" },
            { "Henry Chen", "henry.png" },
            { "Ivy Rodriguez", "ivy.png" },
            { "Jack Thompson", "jack.png" },
            { "Kevin O'Brien", "kevin.png" },
            { "Liam Anderson", "liam.png" },
            { "Mark Taylor", "mark.png" },
            { "Nathan Garcia", "nathan.png" },
            { "Oliver Martinez", "oliver.png" },
            { "Paul Robinson", "paul.png" },
            { "Quentin White", "quentin.png" },
            { "Ryan Clark", "ryan.png" },
            { "Sam Lewis", "sam.png" },
            { "Tom Hall", "tom.png" },
            { "Alex Turner", "alex.png" },
            { "Beth Cooper", "beth.png" },
            { "Charles Murphy", "charles.png" },
            { "Claire Bennett", "claire.png" },
            { "Diana Prince", "diana.png" },
            { "Ethan Hunt", "ethan.png" },
            { "Fiona Gallagher", "fiona.png" },
            { "George Costanza", "george.png" },
            { "Hannah Montana", "hannah.png" },
            { "Isaac Newton", "isaac.png" },
            { "Julia Roberts", "julia.png" },
            { "Brian Johnson", "brian.png" }
        };

        // Try to find a matching avatar, fallback to a default one
        if (avatarMap.TryGetValue(employeeName, out var avatarFile))
        {
            return $"Avatars/{avatarFile}";
        }

        // Fallback to a default avatar based on name hash
        var hash = Math.Abs(employeeName.GetHashCode());
        var defaultAvatars = new[] { "alex.png", "beth.png", "claire.png", "diana.png", "emma.png", "fiona.png", "grace.png", "hannah.png" };
        var defaultAvatar = defaultAvatars[hash % defaultAvatars.Length];
        return $"Avatars/{defaultAvatar}";
    }

    private void OnDragStart(DragEventArgs e)
    {
        DragDropService.StartDrag(Card, ColumnId);
        e.DataTransfer.EffectAllowed = "move";
        StateHasChanged();
    }

    private void OnDragEnd(DragEventArgs e)
    {
        // Only clear the drag state, don't handle the movement here
        // The OnDrop event in DroppableColumn will handle the actual movement
        DragDropService.ClearDrag();
        StateHasChanged();
    }

    private void OnDragOver(DragEventArgs e)
    {
        // Trigger state change to update the drag-over highlighting
        StateHasChanged();
    }

    private async void OnDrop(DragEventArgs e)
    {
        // Handle work assignment if dragging a task/feature onto an employee
        if (DragDropService.IsDragging && DragDropService.DraggedCard != null)
        {
            var draggedCard = DragDropService.DraggedCard;
            
            // Check if we're dropping a task/feature onto an employee
            if ((draggedCard is KanbanTask || draggedCard is Feature) && Card is Employee employee)
            {
                if (DragDropService.CanMoveWorkForward(BoardType, draggedCard, employee))
                {
                    // Move the work to the employee's column and assign it
                    draggedCard.ColumnId = employee.ColumnId;
                    DragDropService.AssignWorkToEmployee(draggedCard, employee);
                    await OnWorkAssigned.InvokeAsync((draggedCard, employee));
                    StateHasChanged();
                }
            }
            // Check if we're dropping an employee onto a task/feature
            else if (draggedCard is Employee draggedEmployee && (Card is KanbanTask || Card is Feature))
            {
                if (DragDropService.CanMoveWorkForward(BoardType, Card, draggedEmployee))
                {
                    // Move the work to the employee's column and assign it
                    Card.ColumnId = draggedEmployee.ColumnId;
                    DragDropService.AssignWorkToEmployee(Card, draggedEmployee);
                    await OnWorkAssigned.InvokeAsync((Card, draggedEmployee));
                    StateHasChanged();
                }
            }
        }
    }
} 