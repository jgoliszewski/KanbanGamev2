@using KanbanGame.Shared
@using KanbanGamev2.Client.Services
@inject IDragDropService DragDropService
@inject ISignalRService SignalRService
@inject IFeatureService FeatureService
@inject ITaskService TaskService
@inject IEmployeeService EmployeeService
@inject KanbanGamev2.Shared.Services.IGameStateService GameStateService

<div class="draggable-card @(IsDragging ? "dragging" : "") @(IsAssignedWorkItem ? "assigned-work-item" : "") @(IsDragOverEmployee ? "drag-over-employee" : "")"
     draggable="true"
     @ondragstart="OnDragStart"
     @ondragend="OnDragEnd"
     @ondragover="OnDragOver"
     @ondragover:preventDefault
     @ondragleave="OnDragLeave"
     @ondrop="OnDrop"
     @ondrop:preventDefault>
    <div class="card mb-2">
        <div class="card-body p-2">
            @if (Card is Employee employee)
            {
                <div class="employee-card @(employee.IsWorking ? "assigned" : "")">
                    <div class="employee-top">
                        <div class="employee-left">
                    <img src="@GetEmployeeAvatar(employee.Name)" alt="@employee.Name" class="employee-avatar" />
                            <div class="employee-info-left">
                                <div class="employee-name">@GetFirstName(employee.Name)</div>
                        <div class="employee-seniority">
                            <span class="badge @GetSeniorityBadgeClass(employee.Seniority)">
                                @employee.Seniority.GetDisplayName()
                            </span>
                        </div>
                            </div>
                        </div>
                        <div class="employee-right">
                        <div class="employee-status">
                            <span class="badge @(employee.IsWorking ? "bg-danger" : "bg-success")">
                                @(employee.IsWorking ? "Working" : "Free")
                            </span>
                            </div>
                            <div class="employee-efficiency">
                                <small class="text-muted">@(employee.Efficiency.ToString("P0"))</small>
                            </div>
                        </div>
                    </div>
                    <div class="employee-bottom">
                        <div class="role-badges-container">
                            <RoleBadges Employee="@employee" />
                        </div>
                    </div>
                    <button class="btn btn-sm btn-outline-primary move-employee-btn" @onclick="() => ShowMoveModal(employee)" title="Move Employee">
                        <i class="oi oi-arrow-right"></i>
                    </button>
                </div>
            }
            else
            {
                <h6 class="card-title mb-1">@Card.Title</h6>
                <p class="card-text small mb-1">@Card.Description</p>
                @if (Card is Feature feature)
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="badge @feature.Priority.GetBadgeClass()">@feature.Priority</span>
                        <small class="text-muted">@feature.StoryPoints SP</small>
                    </div>
                    @if (feature.IsInReadyDevColumn)
                    {
                        <div class="mt-2">
                            <div class="text-success fw-bold">Profit: $@feature.Profit.ToString("N0")</div>
                            <button class="btn btn-primary btn-sm w-100 mt-1" @onclick="async () => await SendToDevelopment(feature)" @onclick:stopPropagation="true">
                                Send to Development
                            </button>
                        </div>
                    }
                    else if (feature.IsInDevelopment)
                    {
                        <div class="mt-2">
                            <div class="text-success fw-bold">Profit: $@feature.Profit.ToString("N0")</div>
                            <div class="labor-intensity">
                                <small class="text-muted">Labor Left: @(feature.LaborLeft.ToString("P0"))</small>
                            </div>
                        </div>
                    }
                    else if (!feature.IsInReadyDevColumn && !feature.IsInDevelopment)
                    {
                        <div class="labor-intensity">
                            <small class="text-muted">Labor Left: @(feature.LaborLeft.ToString("P0"))</small>
                        </div>
                    }
                    @if (feature.IsAssigned)
                    {
                        <span class="badge bg-success">Assigned</span>
                    }
                }
                else if (Card is KanbanTask task)
                {
                    <div class="d-flex justify-content-between align-items-center">
                        <span class="badge @task.Priority.GetBadgeClass()">@task.Priority</span>
                        <small class="text-muted">@task.StoryPoints SP</small>
                    </div>
                    @if (!task.IsInDoneColumn)
                    {
                        <div class="labor-intensity">
                            <small class="text-muted">Labor Left: @(task.LaborLeft.ToString("P0"))</small>
                        </div>
                    }
                    @if (task.AssignedToEmployeeId.HasValue)
                    {
                        <span class="badge bg-success">Assigned</span>
                    }


                    
                    @if (task.HasDependency)
                    {
                        <div class="mt-2">
                            @if (task.IsDependencySatisfied)
                            {
                                <span class="badge bg-success">Dependency âœ“</span>
                            }
                            else if (!task.CanBeMoved)
                            {
                                    <div class="mt-2">
                                        @{
                                        var dependencyTask = TaskService.Tasks.FirstOrDefault(t => t.Id == task.DependsOnTaskId!.Value);
                                        <span class="badge bg-danger">Blocked by @dependencyTask?.Title</span>
                                        }
                                    </div>
                            }
                            else
                            {
                                var dependencyTask = TaskService.Tasks.FirstOrDefault(t => t.Id == task.DependsOnTaskId!.Value);
                                <span class="badge bg-warning">Dependent on @dependencyTask?.Title</span>
                            }
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

<MoveEmployeeModal 
    IsVisible="@showMoveModal"
    Employee="@selectedEmployee"
    CurrentBoardType="@BoardType"
    OnCancel="@(() => showMoveModal = false)"
    OnConfirm="@OnEmployeeMoveConfirmed" />

@code {
    [Parameter] public Card Card { get; set; } = null!;
    [Parameter] public string ColumnId { get; set; } = string.Empty;
    [Parameter] public BoardType BoardType { get; set; }
    [Parameter] public EventCallback<(Card card, string fromColumn, string toColumn)> OnCardMoved { get; set; }
    [Parameter] public EventCallback<(Card workCard, Employee employee)> OnWorkAssigned { get; set; }

    private bool IsDragging => DragDropService.IsDragging && DragDropService.DraggedCard?.Id == Card.Id;
    private bool IsDraggable => !DragDropService.IsReadOnlyBoard(BoardType) && 
                                 !(Card is KanbanTask task && !task.CanBeMoved);

    private bool IsDragOverEmployee => DragDropService.IsDragging && 
                                      Card is Employee && 
                                      DragDropService.DragOverTargetId == Card.Id.ToString() &&
                                      DragDropService.DragOverTargetType == DragOverTargetType.Employee &&
                                      (DragDropService.DraggedCard is KanbanTask || DragDropService.DraggedCard is Feature) &&
                                      DragDropService.CanMoveWorkForward(BoardType, DragDropService.DraggedCard, (Employee)Card);

    private bool IsAssignedWorkItem
    {
        get
        {
            if (Card is KanbanTask task)
                return task.AssignedToEmployeeId.HasValue;
            if (Card is Feature feature)
                return feature.AssignedToEmployeeId.HasValue;
            return false;
        }
    }

    private string GetEmployeeAvatar(string employeeName)
    {
        // Map employee names to available avatar files
        // Since most seeded employee names don't have matching avatar files,
        // we'll assign them to available avatars for consistency
        var avatarMap = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
        {
            { "John Doe", "alex.png" },        // Use available avatar
            { "Jane Smith", "beth.png" },      // Use available avatar
            { "Mike Johnson", "claire.png" },  // Use available avatar
            { "Sarah Wilson", "diana.png" },   // Use available avatar
            { "David Brown", "david.png" }     // This one exists!
        };

        if (avatarMap.TryGetValue(employeeName, out var avatarFile))
        {
            return $"Avatars/{avatarFile}";
        }

        // For any other names, use a hash-based fallback to ensure consistent avatars
        var hash = Math.Abs(employeeName.GetHashCode());
        var defaultAvatars = new[] { "emma.png", "fiona.png", "grace.png", "hannah.png", "henry.png", "ivy.png", "jack.png", "kevin.png" };
        var defaultAvatar = defaultAvatars[hash % defaultAvatars.Length];
        return $"Avatars/{defaultAvatar}";
    }

    private string GetFirstName(string fullName)
    {
        return fullName.Split(' ').FirstOrDefault() ?? fullName;
    }

    private void OnDragStart(DragEventArgs e)
    {
        if (Card is KanbanTask task && !task.CanBeMoved)
        {
            return;
        }
        DragDropService.StartDrag(Card, ColumnId);
        e.DataTransfer.EffectAllowed = "move";
        StateHasChanged();
    }

    private void OnDragEnd(DragEventArgs e)
    {
        // Only clear the drag state, don't handle the movement here
        // The OnDrop event in DroppableColumn will handle the actual movement
        DragDropService.ClearDrag();
        StateHasChanged();
    }

    private void OnDragOver(DragEventArgs e)
    {
        // Set drag-over target for employee highlighting
        if (DragDropService.IsDragging && Card is Employee && 
            (DragDropService.DraggedCard is KanbanTask || DragDropService.DraggedCard is Feature))
        {
            DragDropService.SetDragOverTarget(Card.Id.ToString(), DragOverTargetType.Employee);
        }
        
        // Trigger state change to update the drag-over highlighting
        StateHasChanged();
    }

    private void OnDragLeave(DragEventArgs e)
    {
        // Clear drag-over state when the draggable card is no longer over a droppable area
        DragDropService.ClearDragOver();
        StateHasChanged();
    }

    private async void OnDrop(DragEventArgs e)
    {
        // Handle work assignment if dragging a task/feature onto an employee
        if (DragDropService.IsDragging && DragDropService.DraggedCard != null)
        {
            var draggedCard = DragDropService.DraggedCard;
            
            // Check if we're dropping a task/feature onto an employee
            if ((draggedCard is KanbanTask || draggedCard is Feature) && Card is Employee employee)
            {
                if (DragDropService.CanMoveWorkForward(BoardType, draggedCard, employee))
                {
                    // Move the work to the employee's column and assign it
                    draggedCard.ColumnId = employee.ColumnId;
                    DragDropService.AssignWorkToEmployee(draggedCard, employee);
                    await OnWorkAssigned.InvokeAsync((draggedCard, employee));
                    
                    // Notify other players about the work assignment
                    await SignalRService.NotifyBoardUpdateAsync(BoardType.ToString(), employee.ColumnId, draggedCard);
                    
                    StateHasChanged();
                }
            }
            // Check if we're dropping an employee onto a task/feature
            else if (draggedCard is Employee draggedEmployee && (Card is KanbanTask || Card is Feature))
            {
                if (DragDropService.CanMoveWorkForward(BoardType, Card, draggedEmployee))
                {
                    // Move the work to the employee's column and assign it
                    Card.ColumnId = draggedEmployee.ColumnId;
                    DragDropService.AssignWorkToEmployee(Card, draggedEmployee);
                    await OnWorkAssigned.InvokeAsync((Card, draggedEmployee));
                    
                    // Notify other players about the work assignment
                    await SignalRService.NotifyBoardUpdateAsync(BoardType.ToString(), draggedEmployee.ColumnId, Card);
                    
                    StateHasChanged();
                }
            }
        }
    }

    private string GetPriorityBadgeClass(Priority priority)
    {
        return priority switch
        {
            Priority.High => "bg-danger",
            Priority.Medium => "bg-warning",
            Priority.Low => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetSeniorityBadgeClass(Seniority seniority)
    {
        return seniority switch
        {
            Seniority.Junior => "bg-info",
            Seniority.Mid => "bg-warning",
            Seniority.Senior => "bg-success",
            _ => "bg-secondary"
        };
    }

    private async Task SendToDevelopment(Feature feature)
    {
        await FeatureService.SendFeatureToDevelopment(feature);
        
        // Force a UI refresh
        StateHasChanged();
    }

    // Employee move functionality
    private bool showMoveModal = false;
    private Employee? selectedEmployee = null;

    private void ShowMoveModal(Employee employee)
    {
        selectedEmployee = employee;
        showMoveModal = true;
        StateHasChanged();
    }

    private async Task OnEmployeeMoveConfirmed((Employee employee, BoardType boardType, string columnId) moveData)
    {
        try
        {
            // Store the original board type before moving
            var originalBoardType = BoardType;
            
            await EmployeeService.MoveEmployee(moveData.employee.Id, moveData.boardType, moveData.columnId);
            
            // Notify other players about the employee move - include original board info
            await SignalRService.NotifyEmployeeMoveAsync(moveData.employee, moveData.boardType, moveData.columnId, originalBoardType);
            
            showMoveModal = false;
            selectedEmployee = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error - you might want to show a toast notification
            Console.WriteLine($"Error moving employee: {ex.Message}");
        }
    }
} 