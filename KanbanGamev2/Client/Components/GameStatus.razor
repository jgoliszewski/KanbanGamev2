@using KanbanGamev2.Client.Services
@using KanbanGamev2.Shared.Services
@inject ISignalRService SignalRService
@inject IGameStateService GameStateService
@inject IGlobalLoaderService GlobalLoaderService
@implements IDisposable

<div class="game-status">
    <div class="status-display">
        <div class="player-count">
            <span class="count-text">@SignalRService.ReadyCount / @SignalRService.ConnectedCount</span>
            <span class="count-label">ready players</span>
        </div>
        
        <div class="day-display">
            <span class="day-text">Day @GameStateService.CurrentDay</span>
        </div>
    </div>
    
    <div class="status-buttons">
        <button class="btn btn-sm @(IsReady ? "btn-success" : "btn-outline-success")" 
                @onclick="ToggleReadyStatus" 
                disabled="@(!SignalRService.IsConnected)">
            @(IsReady ? "Ready" : "Not Ready")
        </button>
        
        <button class="btn btn-sm btn-primary" 
                @onclick="AdvanceToNextDay">
            Next Day
        </button>
    </div>
</div>

@code {
    private bool IsReady { get; set; } = false;

    protected override void OnInitialized()
    {
        // Subscribe to SignalR events
        SignalRService.ConnectedCountChanged += OnConnectedCountChanged;
        SignalRService.ReadyCountChanged += OnReadyCountChanged;
        SignalRService.UserConnected += OnUserConnected;
        SignalRService.UserDisconnected += OnUserDisconnected;
        SignalRService.UserReadyStatusChanged += OnUserReadyStatusChanged;
        SignalRService.AllPlayersReady += OnAllPlayersReady;
        SignalRService.NextDayStarted += OnNextDayStarted;
        SignalRService.ReloadGameState += OnReloadGameState;
        SignalRService.ShowLoader += OnShowLoader;
        SignalRService.HideLoader += OnHideLoader;

        // Subscribe to game state events
        GameStateService.DayChanged += OnDayChanged;
        GameStateService.AchievementUnlocked += OnAchievementUnlocked;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Load the current game state from the server
                await GameStateService.LoadGameState();
                
                // Connect to SignalR
                await SignalRService.ConnectAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error in GameStatus initialization: {ex.Message}");
            }
        }
    }

    private async void ToggleReadyStatus()
    {
        IsReady = !IsReady;
        await SignalRService.SetReadyStatusAsync(IsReady);
        StateHasChanged();
    }

    private async Task AdvanceToNextDay()
    {
        try
        {
            GlobalLoaderService.Show("Advancing to Next Day", "Updating game state and synchronizing with other players...");
            
            await SignalRService.AdvanceToNextDayAsync();
            await GameStateService.AdvanceToNextDay();
            
            // Add a small delay to show the loader and make the transition feel more natural
            await Task.Delay(1000);
        }
        finally
        {
            GlobalLoaderService.Hide();
        }
    }

    private async void OnAllPlayersReady()
    {
        // Automatically advance to next day when all players are ready
        await AdvanceToNextDay();
    }

    private void OnNextDayStarted()
    {
        // Reset local ready status when next day starts
        IsReady = false;
        StateHasChanged();
    }

    private bool disposed = false;

    private void OnConnectedCountChanged(int count)
    {
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnReadyCountChanged(int count)
    {
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserConnected(UserInfo userInfo)
    {
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserDisconnected(string connectionId)
    {
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnUserReadyStatusChanged(string connectionId, bool isReady)
    {
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnDayChanged(int newDay)
    {
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnAchievementUnlocked(Achievement achievement)
    {
        // Could show a toast notification here
        if (!disposed)
        {
            InvokeAsync(StateHasChanged);
        }
    }

    private void OnShowLoader(string title, string message)
    {
        if (!disposed)
        {
            GlobalLoaderService.Show(title, message);
        }
    }

    private void OnHideLoader()
    {
        if (!disposed)
        {
            GlobalLoaderService.Hide();
        }
    }

    private async void OnReloadGameState()
    {
        if (!disposed)
        {
            try
            {
                await GameStateService.LoadGameState();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error reloading game state: {ex.Message}");
            }
        }
    }

    public void Dispose()
    {
        disposed = true;
        SignalRService.ConnectedCountChanged -= OnConnectedCountChanged;
        SignalRService.ReadyCountChanged -= OnReadyCountChanged;
        SignalRService.UserConnected -= OnUserConnected;
        SignalRService.UserDisconnected -= OnUserDisconnected;
        SignalRService.UserReadyStatusChanged -= OnUserReadyStatusChanged;
        SignalRService.AllPlayersReady -= OnAllPlayersReady;
        SignalRService.NextDayStarted -= OnNextDayStarted;
        SignalRService.ReloadGameState -= OnReloadGameState;
        SignalRService.ShowLoader -= OnShowLoader;
        SignalRService.HideLoader -= OnHideLoader;

        GameStateService.DayChanged -= OnDayChanged;
        GameStateService.AchievementUnlocked -= OnAchievementUnlocked;
    }
} 