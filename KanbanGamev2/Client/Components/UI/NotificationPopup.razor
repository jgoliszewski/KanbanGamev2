@using KanbanGamev2.Client.Services
@inject INotificationService NotificationService
@inject ISignalRService SignalRService
@implements IDisposable

@if (_notifications.Any())
{
    <div class="notification-container">
        @foreach (var notification in _notifications)
        {
            <div class="notification @GetNotificationClass(notification.Type) @(notification.IsGlobal ? "global" : "")" 
                 @key="notification.Id">
                <div class="notification-header">
                    <h6 class="notification-title">@notification.Title</h6>
                    <button class="btn-close" @onclick="() => RemoveNotification(notification.Id)" title="Close"></button>
                </div>
                <div class="notification-body">
                    @notification.Message
                </div>
                <div class="notification-footer">
                    <small class="text-muted">@notification.Timestamp.ToString("HH:mm:ss")</small>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<NotificationMessage> _notifications = new();

    protected override void OnInitialized()
    {
        NotificationService.NotificationReceived += OnNotificationReceived;
        SignalRService.GlobalNotificationReceived += OnGlobalNotificationReceived;
    }

    private void OnNotificationReceived(NotificationMessage notification)
    {
        _notifications.Add(notification);
        
        // Auto-remove after 5 seconds for non-global notifications
        if (!notification.IsGlobal)
        {
            _ = Task.Delay(5000).ContinueWith(_ =>
            {
                InvokeAsync(() =>
                {
                    RemoveNotification(notification.Id);
                    StateHasChanged();
                });
            });
        }
        
        StateHasChanged();
    }

    private void OnGlobalNotificationReceived(string title, string message, string type)
    {
        var notificationType = type switch
        {
            "Success" => NotificationType.Success,
            "Warning" => NotificationType.Warning,
            "Error" => NotificationType.Error,
            _ => NotificationType.Info
        };

        var notification = new NotificationMessage
        {
            Title = title,
            Message = message,
            Type = notificationType,
            IsGlobal = true
        };

        _notifications.Add(notification);
        StateHasChanged();
    }

    private void RemoveNotification(string id)
    {
        var notification = _notifications.FirstOrDefault(n => n.Id == id);
        if (notification != null)
        {
            _notifications.Remove(notification);
            StateHasChanged();
        }
    }

    private string GetNotificationClass(NotificationType type)
    {
        return type switch
        {
            NotificationType.Success => "notification-success",
            NotificationType.Warning => "notification-warning",
            NotificationType.Error => "notification-error",
            _ => "notification-info"
        };
    }

    public void Dispose()
    {
        NotificationService.NotificationReceived -= OnNotificationReceived;
        SignalRService.GlobalNotificationReceived -= OnGlobalNotificationReceived;
    }
} 