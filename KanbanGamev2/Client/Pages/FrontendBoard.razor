@page "/frontend-board"
@using KanbanGame.Shared
@using KanbanGamev2.Client.Services
@using KanbanGamev2.Client.Components
@inject IEmployeeService EmployeeService
@inject ITaskService TaskService

<PageTitle>Frontend Development Board</PageTitle>

<link href="css/kanban.css" rel="stylesheet" />

<div class="container-fluid">
    <KanbanBoard 
        Title="Frontend Development Board"
        Description="Track frontend tasks and employee assignments through the development process"
        BoardType="@BoardType.Frontend"
        Columns="@frontendColumns"
        OnCardMoved="@OnCardMoved"
        OnWorkAssigned="@OnWorkAssigned" />
</div>

@code {
    private List<KanbanBoard.KanbanColumnData> frontendColumns = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        OrganizeColumns();
    }

    private async Task LoadData()
    {
        await EmployeeService.GetEmployees();
        await TaskService.GetTasks();
    }

    private void OrganizeColumns()
    {
        frontendColumns = new List<KanbanBoard.KanbanColumnData>
        {
            new KanbanBoard.KanbanColumnData
            {
                Title = "Backlog",
                ColumnId = "frontend-backlog",
                Cards = GetCardsByColumn("frontend-backlog")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Analysis",
                ColumnId = "frontend-analysis",
                Cards = GetCardsByColumn("frontend-analysis")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Development Waiting",
                ColumnId = "frontend-dev-waiting",
                Cards = GetCardsByColumn("frontend-dev-waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Development Doing",
                ColumnId = "frontend-dev-doing",
                Cards = GetCardsByColumn("frontend-dev-doing")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Testing Waiting",
                ColumnId = "frontend-test-waiting",
                Cards = GetCardsByColumn("frontend-test-waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Testing Doing",
                ColumnId = "frontend-test-doing",
                Cards = GetCardsByColumn("frontend-test-doing")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Done",
                ColumnId = "frontend-done",
                Cards = GetCardsByColumn("frontend-done")
            }
        };
    }

    private List<Card> GetCardsByColumn(string columnId)
    {
        var cards = new List<Card>();

        // Add tasks for this column
        var tasks = TaskService.Tasks.Where(t => t.ColumnId == columnId).ToList();
        cards.AddRange(tasks);

        // Add employees for this column
        var employees = EmployeeService.Employees.Where(e => e.ColumnId == columnId).ToList();
        cards.AddRange(employees);

        // Sort cards so employees appear above their assigned work
        return SortCardsWithEmployeesFirst(cards);
    }

    private List<Card> SortCardsWithEmployeesFirst(List<Card> cards)
    {
        var sortedCards = new List<Card>();
        var employees = cards.OfType<Employee>().ToList();
        var workItems = cards.Where(c => c is Feature || c is KanbanTask).ToList();

        // Add employees first
        sortedCards.AddRange(employees);

        // Add work items, placing assigned work right after their assigned employee
        foreach (var employee in employees)
        {
            if (employee.AssignedTaskId.HasValue)
            {
                var assignedTask = workItems.OfType<KanbanTask>().FirstOrDefault(t => t.Id == employee.AssignedTaskId.Value);
                if (assignedTask != null)
                {
                    sortedCards.Add(assignedTask);
                    workItems.Remove(assignedTask);
                }
            }
            else if (employee.AssignedFeatureId.HasValue)
            {
                var assignedFeature = workItems.OfType<Feature>().FirstOrDefault(f => f.Id == employee.AssignedFeatureId.Value);
                if (assignedFeature != null)
                {
                    sortedCards.Add(assignedFeature);
                    workItems.Remove(assignedFeature);
                }
            }
        }

        // Add remaining unassigned work items
        sortedCards.AddRange(workItems);

        return sortedCards;
    }

    private async Task OnCardMoved((Card card, string fromColumn, string toColumn) moveInfo)
    {
        var (card, fromColumn, toColumn) = moveInfo;

        // Update the card's column
        card.ColumnId = toColumn;
        card.UpdatedAt = DateTime.Now;

        // Update the card in the appropriate service
        if (card is Employee employee)
        {
            await EmployeeService.UpdateEmployee(employee);
        }
        else if (card is KanbanTask task)
        {
            // If this is a work item being moved, unassign the employee
            if (task.AssignedToEmployeeId.HasValue)
            {
                var cardsInFromColumn = GetCardsByColumn(fromColumn);
                var assignedEmployee = cardsInFromColumn.FirstOrDefault(x => x.Id == task.AssignedToEmployeeId.Value && x is Employee);
                if (assignedEmployee is not null)
                {
                    (assignedEmployee! as Employee).AssignedTaskId = null;
                    await EmployeeService.UpdateEmployee(assignedEmployee as Employee);
                }


                task.AssignedToEmployeeId = null;
            }

            await TaskService.UpdateTask(task);
        }

        // Reorganize columns to reflect the change
        OrganizeColumns();
        StateHasChanged();
    }

    private async Task OnWorkAssigned((Card workCard, Employee employee) assignmentInfo)
    {
        var (workCard, employee) = assignmentInfo;
        
        // Update the work card (it has already been moved to the employee's column)
        if (workCard is Feature feature)
        {
            // Note: We'll need to inject IFeatureService if we want to update features
        }
        else if (workCard is KanbanTask task)
        {
            await TaskService.UpdateTask(task);
        }
        
        // Update the employee
        await EmployeeService.UpdateEmployee(employee);
        
        // Reorganize columns to reflect the change
        OrganizeColumns();
        StateHasChanged();
    }
} 