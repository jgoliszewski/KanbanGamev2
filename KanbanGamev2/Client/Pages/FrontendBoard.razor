@page "/frontend-board"
@using KanbanGame.Shared
@using KanbanGamev2.Client.Services
@using KanbanGamev2.Client.Components
@inject IEmployeeService EmployeeService
@inject ITaskService TaskService
@inject ISignalRService SignalRService
@inject IGlobalLoaderService GlobalLoaderService
@implements IDisposable

<PageTitle>Frontend Development Board</PageTitle>

<link href="css/kanban.css" rel="stylesheet" />

<div class="container-fluid">
    <KanbanBoard 
        Title="Frontend Development Board"
        Description="Track frontend tasks and employee assignments through the development process"
        BoardType="@BoardType.Frontend"
        Columns="@frontendColumns"
        OnCardMoved="@OnCardMoved"
        OnWorkAssigned="@OnWorkAssigned" />
</div>

@code {
    private List<KanbanBoard.KanbanColumnData> frontendColumns = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            GlobalLoaderService.Show("Loading Frontend Board", "Initializing board data and connecting to real-time updates...");
            
        await LoadData();
        OrganizeColumns();
        
        // Subscribe to real-time board updates
        SignalRService.BoardUpdated += OnBoardUpdated;
        SignalRService.RefreshAllBoards += OnRefreshAllBoards;
        SignalRService.EmployeeMoved += OnEmployeeMoved;
        SignalRService.EmployeeStatusChanged += OnEmployeeStatusChanged;
        }
        finally
        {
            GlobalLoaderService.Hide();
        }
    }

    private async Task LoadData()
    {
        await EmployeeService.GetEmployees();
        await TaskService.GetTasks();
    }

    private void OrganizeColumns()
    {
        frontendColumns = new List<KanbanBoard.KanbanColumnData>
        {
            new KanbanBoard.KanbanColumnData
            {
                Title = "Backlog",
                ColumnId = "frontend-backlog",
                Cards = GetCardsByColumn("frontend-backlog")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Analysis",
                ColumnId = "frontend-analysis",
                Cards = GetCardsByColumn("frontend-analysis")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Development Waiting",
                ColumnId = "frontend-dev-waiting",
                Cards = GetCardsByColumn("frontend-dev-waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Development Doing",
                ColumnId = "frontend-dev-doing",
                Cards = GetCardsByColumn("frontend-dev-doing")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Testing Waiting",
                ColumnId = "frontend-test-waiting",
                Cards = GetCardsByColumn("frontend-test-waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Testing Doing",
                ColumnId = "frontend-test-doing",
                Cards = GetCardsByColumn("frontend-test-doing")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Done",
                ColumnId = "frontend-done",
                Cards = GetCardsByColumn("frontend-done")
            }
        };
    }

    private List<Card> GetCardsByColumn(string columnId)
    {
        var cards = new List<Card>();

        // Add tasks for this column
        var tasks = TaskService.Tasks.Where(t => t.ColumnId == columnId).ToList();
        cards.AddRange(tasks);

        // Add employees for this column
        var employees = EmployeeService.Employees.Where(e => e.ColumnId == columnId).ToList();
        cards.AddRange(employees);

        // Sort cards so employees appear above their assigned work
        return cards;
    }

    private async Task OnCardMoved((Card card, string fromColumn, string toColumn) moveInfo)
    {
        var (card, fromColumn, toColumn) = moveInfo;

        // Update the card's column
        card.ColumnId = toColumn;
        card.UpdatedAt = DateTime.Now;

        // Update the card in the appropriate service
        if (card is Employee employee)
        {
            await EmployeeService.UpdateEmployee(employee);
        }
        else if (card is KanbanTask task)
        {
            // If this is a work item being moved, unassign the employee
            if (task.AssignedToEmployeeId.HasValue)
            {
                var cardsInFromColumn = GetCardsByColumn(fromColumn);
                var assignedEmployee = cardsInFromColumn.FirstOrDefault(x => x.Id == task.AssignedToEmployeeId.Value && x is Employee);
                if (assignedEmployee is not null)
                {
                    (assignedEmployee! as Employee).AssignedTaskId = null;
                    await EmployeeService.UpdateEmployee(assignedEmployee as Employee);
                }

                task.AssignedToEmployeeId = null;
            }

            await TaskService.UpdateTask(task);
        }

        // Reorganize columns to reflect the change
        OrganizeColumns();
        StateHasChanged();
    }

    private async Task OnWorkAssigned((Card workCard, Employee employee) assignmentInfo)
    {
        var (workCard, employee) = assignmentInfo;
        
        // Update the work card (it has already been moved to the employee's column)
        if (workCard is Feature feature)
        {
            // Note: We'll need to inject IFeatureService if we want to update features
        }
        else if (workCard is KanbanTask task)
        {
            await TaskService.UpdateTask(task);
        }
        
        // Update the employee
        await EmployeeService.UpdateEmployee(employee);
        
        // Reorganize columns to reflect the change
        OrganizeColumns();
        StateHasChanged();
        
        // Notify other players about the work assignment
        await SignalRService.NotifyBoardUpdateAsync(BoardType.Frontend.ToString(), employee.ColumnId, workCard);
    }

    private async void OnBoardUpdated(string boardType, string columnId, object cardData)
    {
        // Only handle updates for this board type
        if (boardType == BoardType.Frontend.ToString())
        {
            // Reload data from services to ensure we have the latest state
            await LoadData();
            OrganizeColumns();
            StateHasChanged();
        }
    }

    private async void OnRefreshAllBoards()
    {
        // Reload data from services to ensure we have the latest state
        await LoadData();
        OrganizeColumns();
        StateHasChanged();
    }

    private async void OnEmployeeMoved(Employee employee, BoardType destinationBoardType, string columnId, BoardType originalBoardType)
    {
        // Refresh this board if it's either the original or destination board
        if (BoardType.Frontend == originalBoardType || BoardType.Frontend == destinationBoardType)
        {
            // Reload data to reflect the employee move
            await LoadData();
            OrganizeColumns();
            StateHasChanged();
        }
    }

    private async void OnEmployeeStatusChanged(Employee employee, EmployeeStatus oldStatus, EmployeeStatus newStatus)
    {
        // When employee status changes, we need to update the board data
        // to reflect the new status (e.g., fired employees disappear, vacation employees are hidden)
        await LoadData();
        OrganizeColumns();
        StateHasChanged();
    }

    public void Dispose()
    {
        SignalRService.BoardUpdated -= OnBoardUpdated;
        SignalRService.RefreshAllBoards -= OnRefreshAllBoards;
        SignalRService.EmployeeMoved -= OnEmployeeMoved;
        SignalRService.EmployeeStatusChanged -= OnEmployeeStatusChanged;
    }
} 