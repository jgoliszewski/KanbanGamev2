@page "/analysis-board"
@using KanbanGame.Shared
@using KanbanGamev2.Client.Services
@using KanbanGamev2.Client.Components
@inject IEmployeeService EmployeeService
@inject IFeatureService FeatureService

<PageTitle>High Level Analysis Board</PageTitle>

<link href="css/kanban.css" rel="stylesheet" />

<div class="container-fluid">
    <KanbanBoard 
        Title="High Level Analysis Board"
        Description="Track features and employee assignments through the analysis process"
        Columns="@analysisColumns"
        OnCardMoved="@OnCardMoved" />
</div>

@code {
    private List<KanbanBoard.KanbanColumnData> analysisColumns = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        OrganizeColumns();
    }

    private async Task LoadData()
    {
        await EmployeeService.GetEmployees();
        await FeatureService.GetFeatures();
    }

    private void OrganizeColumns()
    {
        analysisColumns = new List<KanbanBoard.KanbanColumnData>
        {
            new KanbanBoard.KanbanColumnData
            {
                Title = "Backlog",
                ColumnId = "backlog",
                Cards = GetCardsByColumn("backlog")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Under Analysis 1",
                ColumnId = "analysis1",
                Cards = GetCardsByColumn("analysis1")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Waiting",
                ColumnId = "waiting",
                Cards = GetCardsByColumn("waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Under Analysis 2",
                ColumnId = "analysis2",
                Cards = GetCardsByColumn("analysis2")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Ready for Development",
                ColumnId = "ready-dev",
                Cards = GetCardsByColumn("ready-dev")
            }
        };
    }

    private List<Card> GetCardsByColumn(string columnId)
    {
        var cards = new List<Card>();
        
        // Add features for this column
        var features = FeatureService.Features.Where(f => f.ColumnId == columnId).ToList();
        cards.AddRange(features);
        
        // Add employees for this column
        var employees = EmployeeService.Employees.Where(e => e.ColumnId == columnId).ToList();
        cards.AddRange(employees);
        
        return cards;
    }

    private async Task OnCardMoved((Card card, string fromColumn, string toColumn) moveInfo)
    {
        var (card, fromColumn, toColumn) = moveInfo;
        
        // Update the card's column
        card.ColumnId = toColumn;
        card.UpdatedAt = DateTime.Now;

        // Update the card in the appropriate service
        if (card is Employee employee)
        {
            await EmployeeService.UpdateEmployee(employee);
        }
        else if (card is Feature feature)
        {
            await FeatureService.UpdateFeature(feature);
        }

        // Reorganize columns to reflect the change
        OrganizeColumns();
        StateHasChanged();
    }
} 