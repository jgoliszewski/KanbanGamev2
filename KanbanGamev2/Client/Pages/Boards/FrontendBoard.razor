@page "/frontend-board"
@using KanbanGame.Shared
@using KanbanGamev2.Client.Services
@using KanbanGamev2.Client.Components
@inject IEmployeeService EmployeeService
@inject ITaskService TaskService

<PageTitle>Frontend Development Board</PageTitle>

<link href="css/kanban.css" rel="stylesheet" />

<div class="container-fluid">
    <KanbanBoard 
        Title="Frontend Development Board"
        Description="Track frontend tasks and employee assignments through the development process"
        BoardType="@BoardType.Frontend"
        Columns="@frontendColumns"
        OnCardMoved="@OnCardMoved" />
</div>

@code {
    private List<KanbanBoard.KanbanColumnData> frontendColumns = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        OrganizeColumns();
    }

    private async Task LoadData()
    {
        await EmployeeService.GetEmployees();
        await TaskService.GetTasks();
    }

    private void OrganizeColumns()
    {
        frontendColumns = new List<KanbanBoard.KanbanColumnData>
        {
            new KanbanBoard.KanbanColumnData
            {
                Title = "Backlog",
                ColumnId = "frontend-backlog",
                Cards = GetCardsByColumn("frontend-backlog")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Analysis",
                ColumnId = "frontend-analysis",
                Cards = GetCardsByColumn("frontend-analysis")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Development Waiting",
                ColumnId = "frontend-dev-waiting",
                Cards = GetCardsByColumn("frontend-dev-waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Development Doing",
                ColumnId = "frontend-dev-doing",
                Cards = GetCardsByColumn("frontend-dev-doing")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Testing Waiting",
                ColumnId = "frontend-test-waiting",
                Cards = GetCardsByColumn("frontend-test-waiting")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Testing Doing",
                ColumnId = "frontend-test-doing",
                Cards = GetCardsByColumn("frontend-test-doing")
            },
            new KanbanBoard.KanbanColumnData
            {
                Title = "Done",
                ColumnId = "frontend-done",
                Cards = GetCardsByColumn("frontend-done")
            }
        };
    }

    private List<Card> GetCardsByColumn(string columnId)
    {
        var cards = new List<Card>();
        
        // Add tasks for this column
        var tasks = TaskService.Tasks.Where(t => t.ColumnId == columnId).ToList();
        cards.AddRange(tasks);
        
        // Add employees for this column
        var employees = EmployeeService.Employees.Where(e => e.ColumnId == columnId).ToList();
        cards.AddRange(employees);
        
        return cards;
    }

    private async Task OnCardMoved((Card card, string fromColumn, string toColumn) moveInfo)
    {
        var (card, fromColumn, toColumn) = moveInfo;
        
        // Update the card's column
        card.ColumnId = toColumn;
        card.UpdatedAt = DateTime.Now;

        // Update the card in the appropriate service
        if (card is Employee employee)
        {
            await EmployeeService.UpdateEmployee(employee);
        }
        else if (card is KanbanTask task)
        {
            await TaskService.UpdateTask(task);
        }

        // Reorganize columns to reflect the change
        OrganizeColumns();
        StateHasChanged();
    }
} 